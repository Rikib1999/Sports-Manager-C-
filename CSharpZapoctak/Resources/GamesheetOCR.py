import sys
import cv2
import numpy as np
import pytesseract
from scipy import ndimage

#import pandas as pd
#import matplotlib.pyplot as plt
#import csv
#from PIL import Image

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

#read your file
#file = r'/Users/riki1/Desktop/gamesheet_test.png'
file = sys.argv[1];
img = cv2.imread(file,0)

img = cv2.multiply(img, 1.2)
kernel = np.ones((1, 1), np.uint8)
img = cv2.erode(img, kernel, iterations=2)

img.shape
img = cv2.resize(img, (3380, 2311))

#thresholding the image to a binary image
thresh,img_bin = cv2.threshold(img,128,255,cv2.THRESH_BINARY | cv2.THRESH_OTSU)

#inverting the image 
img_bin = 255-img_bin

# countcol(width) of kernel as 100th of total width
kernel_len = np.array(img).shape[1]//100
# Defining a vertical kernel to detect all vertical lines of image 
ver_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, kernel_len))
# Defining a horizontal kernel to detect all horizontal lines of image
hor_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_len, 1))
# A kernel of 2x2
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))

#Use vertical kernel to detect and save the vertical lines in a jpg
image_1 = cv2.erode(img_bin, ver_kernel, iterations=3)
vertical_lines = cv2.dilate(image_1, ver_kernel, iterations=3)

#Use horizontal kernel to detect and save the horizontal lines in a jpg
image_2 = cv2.erode(img_bin, hor_kernel, iterations=3)
horizontal_lines = cv2.dilate(image_2, hor_kernel, iterations=3)

# Combine horizontal and vertical lines in a new third image, with both having same weight.
img_vh = cv2.addWeighted(vertical_lines, 0.5, horizontal_lines, 0.5, 0.0)
#Eroding and thesholding the image
img_vh = cv2.erode(~img_vh, kernel, iterations=2)
thresh, img_vh = cv2.threshold(img_vh,128,255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
bitxor = cv2.bitwise_xor(img,img_vh)
bitnot = cv2.bitwise_not(bitxor)

# Detect contours for following box detection
contours, hierarchy = cv2.findContours(img_vh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

def sort_contours(cnts, method="left-to-right"):
    # initialize the reverse flag and sort index
    reverse = False
    i = 0
    # handle if we need to sort in reverse
    if method == "right-to-left" or method == "bottom-to-top":
        reverse = True
    # handle if we are sorting against the y-coordinate rather than
    # the x-coordinate of the bounding box
    if method == "top-to-bottom" or method == "bottom-to-top":
        i = 1
    # construct the list of bounding boxes and sort them from top to
    # bottom
    boundingBoxes = [cv2.boundingRect(c) for c in cnts]
    (cnts, boundingBoxes) = zip(*sorted(zip(cnts, boundingBoxes),
    key=lambda b:b[1][i], reverse=reverse))
    # return the list of sorted contours and bounding boxes
    return (cnts, boundingBoxes)

# Sort all the contours by top to bottom.
contours, boundingBoxes = sort_contours(contours, method="top-to-bottom")

#rotating the image
first_x = boundingBoxes[1][0]
first_y = boundingBoxes[1][1]
first_h = boundingBoxes[1][3]
second_x = boundingBoxes[5][0]
second_y = boundingBoxes[5][1]
second_h = boundingBoxes[5][3]

points = np.array([[first_x, first_y], [first_x, first_y + first_h], [second_x, second_y], [second_x, second_y + second_h]])
rect = cv2.minAreaRect(points)

img_vh = ndimage.rotate(img_vh, rect[2] - 90.0, cval=255)
bitnot = ndimage.rotate(bitnot, rect[2] - 90.05, cval=255)

# Detect contours for following box detection
contours, hierarchy = cv2.findContours(img_vh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Sort all the contours by top to bottom.
contours, boundingBoxes = sort_contours(contours)
first_x = boundingBoxes[1][0]
contours, boundingBoxes = sort_contours(contours, method="top-to-bottom")
first_y = boundingBoxes[1][1]

contours, boundingBoxes = sort_contours(contours, method="right-to-left")
last_x = boundingBoxes[0][0]
last_w = boundingBoxes[0][2]
contours, boundingBoxes = sort_contours(contours, method="bottom-to-top")
last_y = boundingBoxes[0][1]
last_h = boundingBoxes[0][3]

top = (3 / 2311) * len(img[0])
left = (3 / 3380) * len(img)
down = (2 / 2311) * len(img[0])
right = (2 / 3380) * len(img)

#delete contours
for c in contours:
    cv2.drawContours(bitnot, [c], -1, (255,255,255), 5)

bitnot = bitnot[int(first_y - top + 5) : int(last_y + last_h + down + 1.0), int(first_x - left) : int(last_x + last_w + right + 1.0)]
bitnot = cv2.resize(bitnot, (3380, 2311))

finalboxes = [[[[11, 11, 418, 38]], [], [], [], [], [], [[432, 11, 418, 38]], [], [], [], [], [], [[856, 11, 699, 38]], [], [], [], [], [[1562, 11, 822, 38]], [], [], [], [], [], [[2391, 11, 698, 38]], [], [], [], [[3096, 11, 275, 38]], []], [[[11, 55, 418, 41]], [], [], [], [], [], [[432, 55, 418, 41]], [], [], [], [], [[856, 55, 137, 39]], [[996, 55, 138, 39]], [[1137, 55, 138, 39]], [[1278, 55, 138, 39]], [[1419, 55, 136, 39]], [[1562, 55, 123, 39]], [[1688, 55, 208, 39]], [[1899, 55, 98, 39]], [[2000, 55, 138, 39]], [[2141, 55, 138, 39]], [[2282, 55, 102, 39]], [[2391, 55, 136, 39]], [[2530, 55, 138, 39]], [[2671, 55, 138, 39]], [[2812, 55, 138, 39]], [[2953, 55, 136, 39]], [[3096, 55, 66, 41]], [[3165, 55, 206, 41]]], [[[11, 99, 418, 40]], [], [], [], [], [], [[432, 99, 418, 40]], [], [], [], [], [[856, 100, 137, 41]], [[996, 100, 138, 41]], [[1137, 100, 138, 41]], [[1278, 100, 138, 41]], [[1419, 100, 136, 41]], [[1562, 100, 123, 41]], [[1688, 100, 208, 41]], [[1899, 100, 98, 41]], [[2000, 100, 138, 41]], [[2141, 100, 138, 41]], [[2282, 100, 102, 41]], [[2391, 100, 136, 41]], [[2530, 100, 138, 41]], [[2671, 100, 138, 41]], [[2812, 100, 138, 41]], [[2953, 100, 136, 41]], [[3096, 99, 66, 42]], [[3165, 99, 206, 42]]], [[[11, 145, 136, 41]], [[150, 145, 68, 41]], [[221, 145, 67, 41]], [[291, 145, 68, 41]], [[362, 145, 67, 41]], [[432, 145, 68, 41]], [[503, 145, 67, 41]], [[573, 145, 68, 41]], [[644, 145, 67, 41]], [[714, 145, 68, 41]], [[785, 145, 65, 41]], [[856, 144, 137, 42]], [[996, 144, 138, 42]], [[1137, 144, 138, 42]], [[1278, 144, 138, 42]], [[1419, 144, 136, 42]], [[1562, 144, 123, 42]], [[1688, 144, 208, 42]], [[1899, 144, 98, 42]], [[2000, 144, 138, 42]], [[2141, 144, 138, 42]], [[2282, 144, 102, 42]], [[2391, 144, 136, 42]], [[2530, 144, 138, 42]], [[2671, 144, 138, 42]], [[2812, 144, 138, 42]], [[2953, 144, 136, 42]], [[3096, 144, 66, 42]], [[3165, 144, 206, 42]]], [[[11, 189, 136, 42]], [[150, 189, 68, 42]], [[221, 189, 67, 42]], [[291, 189, 68, 42]], [[362, 189, 67, 42]], [[432, 189, 68, 42]], [[503, 189, 67, 42]], [[573, 189, 68, 42]], [[644, 189, 67, 42]], [[714, 189, 68, 42]], [[785, 189, 65, 42]], [[856, 189, 137, 42]], [[996, 189, 138, 42]], [[1137, 189, 138, 42]], [[1278, 189, 138, 42]], [[1419, 189, 136, 42]], [[1562, 189, 123, 42]], [[1688, 189, 208, 42]], [[1899, 189, 98, 42]], [[2000, 189, 138, 42]], [[2141, 189, 138, 42]], [[2282, 189, 102, 42]], [[2391, 189, 136, 42]], [[2530, 189, 138, 42]], [[2671, 189, 138, 42]], [[2812, 189, 138, 42]], [[2953, 189, 136, 42]], [[3096, 189, 66, 40]], [[3165, 189, 206, 40]]], [[[11, 234, 136, 40]], [[150, 234, 68, 40]], [[221, 234, 67, 40]], [[291, 234, 68, 40]], [[362, 234, 67, 40]], [[432, 234, 68, 40]], [[503, 234, 67, 40]], [[573, 234, 68, 40]], [[644, 234, 67, 40]], [[714, 234, 68, 40]], [[785, 234, 65, 40]], [[856, 234, 137, 42]], [[996, 234, 138, 42]], [[1137, 234, 138, 42]], [[1278, 234, 138, 42]], [[1419, 234, 136, 42]], [[1562, 234, 123, 42]], [[1688, 234, 208, 42]], [[1899, 234, 98, 42]], [[2000, 234, 138, 42]], [[2141, 234, 138, 42]], [[2282, 234, 102, 42]], [[2391, 234, 136, 42]], [[2530, 234, 138, 42]], [[2671, 234, 138, 42]], [[2812, 234, 138, 42]], [[2953, 234, 136, 42]], [[3096, 236, 66, 40]], [[3165, 236, 206, 40]]], [[[11, 281, 416, 38]], [], [], [], [], [[434, 281, 207, 40]], [], [], [[644, 281, 206, 40]], [], [], [[856, 279, 137, 42]], [[996, 279, 138, 42]], [[1137, 279, 138, 42]], [[1278, 279, 138, 42]], [[1419, 279, 136, 42]], [[1562, 279, 123, 42]], [[1688, 279, 208, 42]], [[1899, 279, 98, 42]], [[2000, 279, 138, 42]], [[2141, 279, 138, 42]], [[2282, 279, 102, 42]], [[2391, 279, 136, 42]], [[2530, 279, 138, 42]], [[2671, 279, 138, 42]], [[2812, 279, 138, 42]], [[2953, 279, 136, 42]], [[3096, 279, 66, 42]], [[3165, 279, 206, 42]]], [[[11, 326, 136, 38]], [[150, 326, 138, 38]], [], [[291, 326, 136, 38]], [], [[434, 324, 207, 42]], [], [], [[644, 324, 206, 42]], [], [], [[856, 324, 137, 42]], [[996, 324, 138, 42]], [[1137, 324, 138, 42]], [[1278, 324, 138, 42]], [[1419, 324, 136, 42]], [[1562, 324, 123, 42]], [[1688, 324, 208, 42]], [[1899, 324, 98, 42]], [[2000, 324, 138, 42]], [[2141, 324, 138, 42]], [[2282, 324, 102, 42]], [[2391, 324, 136, 42]], [[2530, 324, 138, 42]], [[2671, 324, 138, 42]], [[2812, 324, 138, 42]], [[2953, 324, 136, 42]], [[3096, 324, 66, 40]], [[3165, 324, 206, 40]]], [[[11, 371, 136, 40]], [[150, 371, 138, 40]], [], [[291, 371, 136, 40]], [], [[434, 369, 207, 42]], [], [], [[644, 369, 206, 42]], [], [], [[856, 369, 137, 42]], [[996, 369, 138, 42]], [[1137, 369, 138, 42]], [[1278, 369, 138, 42]], [[1419, 369, 136, 42]], [[1562, 369, 123, 42]], [[1688, 369, 208, 42]], [[1899, 369, 98, 42]], [[2000, 369, 138, 42]], [[2141, 369, 138, 42]], [[2282, 369, 102, 42]], [[2391, 369, 136, 42]], [[2530, 369, 138, 42]], [[2671, 369, 138, 42]], [[2812, 369, 138, 42]], [[2953, 369, 136, 42]], [[3096, 371, 275, 38]], []], [[[11, 414, 136, 42]], [[150, 414, 138, 42]], [], [[291, 414, 136, 42]], [], [[434, 414, 207, 42]], [], [], [[644, 414, 206, 42]], [], [], [[856, 414, 137, 42]], [[996, 414, 138, 42]], [[1137, 414, 138, 42]], [[1278, 414, 138, 42]], [[1419, 414, 136, 42]], [[1562, 414, 123, 42]], [[1688, 414, 208, 42]], [[1899, 414, 98, 42]], [[2000, 414, 138, 42]], [[2141, 414, 138, 42]], [[2282, 414, 102, 42]], [[2391, 414, 136, 42]], [[2530, 414, 138, 42]], [[2671, 414, 138, 42]], [[2812, 414, 138, 42]], [[2953, 414, 136, 42]], [[3096, 416, 66, 40]], [[3165, 416, 206, 40]]], [[[11, 459, 136, 42]], [[150, 459, 138, 42]], [], [[291, 459, 136, 42]], [], [[434, 459, 207, 42]], [], [], [[644, 459, 206, 42]], [], [], [[856, 459, 137, 42]], [[996, 459, 138, 42]], [[1137, 459, 138, 42]], [[1278, 459, 138, 42]], [[1419, 459, 136, 42]], [[1562, 459, 123, 42]], [[1688, 459, 208, 42]], [[1899, 459, 98, 42]], [[2000, 459, 138, 42]], [[2141, 459, 138, 42]], [[2282, 459, 102, 42]], [[2391, 459, 136, 42]], [[2530, 459, 138, 42]], [[2671, 459, 138, 42]], [[2812, 459, 138, 42]], [[2953, 459, 136, 42]], [[3096, 459, 66, 42]], [[3165, 459, 206, 42]]], [[[11, 504, 136, 42]], [[150, 504, 138, 42]], [], [[291, 504, 136, 42]], [], [[434, 504, 207, 42]], [], [], [[644, 504, 206, 42]], [], [], [[856, 504, 137, 42]], [[996, 504, 138, 42]], [[1137, 504, 138, 42]], [[1278, 504, 138, 42]], [[1419, 504, 136, 42]], [[1562, 504, 123, 42]], [[1688, 504, 208, 42]], [[1899, 504, 98, 42]], [[2000, 504, 138, 42]], [[2141, 504, 138, 42]], [[2282, 504, 102, 42]], [[2391, 504, 136, 42]], [[2530, 504, 138, 42]], [[2671, 504, 138, 42]], [[2812, 504, 138, 42]], [[2953, 504, 136, 42]], [[3096, 504, 66, 42]], [[3165, 504, 206, 42]]], [[[11, 549, 136, 42]], [[150, 549, 138, 42]], [], [[291, 549, 136, 42]], [], [[434, 549, 207, 42]], [], [], [[644, 549, 206, 42]], [], [], [[856, 549, 137, 42]], [[996, 549, 138, 42]], [[1137, 549, 138, 42]], [[1278, 549, 138, 42]], [[1419, 549, 136, 42]], [[1562, 549, 123, 42]], [[1688, 549, 208, 42]], [[1899, 549, 98, 42]], [[2000, 549, 138, 42]], [[2141, 549, 138, 42]], [[2282, 549, 102, 42]], [[2391, 549, 136, 42]], [[2530, 549, 138, 42]], [[2671, 549, 138, 42]], [[2812, 549, 138, 42]], [[2953, 549, 136, 42]], [[3096, 549, 66, 42]], [[3165, 549, 206, 42]]], [[[11, 594, 136, 42]], [[150, 594, 138, 42]], [], [[291, 594, 136, 42]], [], [[434, 594, 207, 42]], [], [], [[644, 594, 206, 42]], [], [], [[856, 594, 137, 42]], [[996, 594, 138, 42]], [[1137, 594, 138, 42]], [[1278, 594, 138, 42]], [[1419, 594, 136, 42]], [[1562, 594, 123, 42]], [[1688, 594, 208, 42]], [[1899, 594, 98, 42]], [[2000, 594, 138, 42]], [[2141, 594, 138, 42]], [[2282, 594, 102, 42]], [[2391, 594, 136, 42]], [[2530, 594, 138, 42]], [[2671, 594, 138, 42]], [[2812, 594, 138, 42]], [[2953, 594, 136, 42]], [[3096, 594, 66, 42]], [[3165, 594, 206, 42]]], [[[11, 639, 136, 40]], [[150, 639, 138, 40]], [], [[291, 639, 136, 40]], [], [], [[434, 639, 280, 40]], [[714, 639, 136, 40]], [], [], [], [[856, 639, 137, 40]], [[996, 639, 138, 40]], [[1137, 639, 138, 40]], [[1278, 639, 138, 40]], [[1419, 639, 136, 40]], [[1562, 639, 123, 42]], [[1688, 639, 208, 42]], [[1899, 639, 98, 42]], [[2000, 639, 138, 42]], [[2141, 639, 138, 42]], [[2282, 639, 102, 42]], [[2391, 639, 136, 42]], [[2530, 639, 138, 42]], [[2671, 639, 138, 42]], [[2812, 639, 138, 42]], [[2953, 639, 136, 42]], [[3096, 639, 66, 40]], [[3165, 639, 206, 40]]], [[], [[11, 685, 769, 39]], [], [], [], [], [], [], [], [], [], [[786, 685, 769, 39]], [], [], [], [], [[1562, 684, 123, 42]], [[1688, 684, 208, 42]], [[1899, 684, 98, 42]], [[2000, 684, 138, 42]], [[2141, 684, 138, 42]], [[2282, 684, 102, 42]], [[2391, 684, 136, 42]], [[2530, 684, 138, 42]], [[2671, 684, 138, 42]], [[2812, 684, 138, 42]], [[2953, 684, 136, 42]], [[3096, 685, 275, 39]], []], [[[11, 731, 136, 38]], [], [[150, 731, 491, 38]], [], [], [], [], [], [[644, 731, 136, 38]], [], [[786, 731, 137, 38]], [], [[926, 731, 490, 38]], [], [], [[1419, 731, 136, 38]], [[1562, 729, 123, 42]], [[1688, 729, 208, 42]], [[1899, 729, 98, 42]], [[2000, 729, 138, 42]], [[2141, 729, 138, 42]], [[2282, 729, 102, 42]], [[2391, 729, 136, 42]], [[2530, 729, 138, 42]], [[2671, 729, 138, 42]], [[2812, 729, 138, 42]], [[2953, 729, 136, 42]], [[3096, 731, 66, 40]], [[3165, 731, 206, 40]]], [[[11, 776, 136, 40]], [], [[150, 776, 491, 40]], [], [], [], [], [], [[644, 776, 136, 40]], [], [[786, 776, 137, 40]], [], [[926, 776, 490, 40]], [], [], [[1419, 776, 136, 40]], [[1562, 774, 123, 42]], [[1688, 774, 208, 42]], [[1899, 774, 98, 42]], [[2000, 774, 138, 42]], [[2141, 774, 138, 42]], [[2282, 774, 102, 42]], [[2391, 774, 136, 42]], [[2530, 774, 138, 42]], [[2671, 774, 138, 42]], [[2812, 774, 138, 42]], [[2953, 774, 136, 42]], [[3096, 774, 66, 42]], [[3165, 774, 206, 42]]], [[[11, 819, 136, 42]], [], [[150, 819, 491, 42]], [], [], [], [], [], [[644, 819, 136, 42]], [], [[786, 819, 137, 42]], [], [[926, 819, 490, 42]], [], [], [[1419, 819, 136, 42]], [[1562, 819, 123, 42]], [[1688, 819, 208, 42]], [[1899, 819, 98, 42]], [[2000, 819, 138, 42]], [[2141, 819, 138, 42]], [[2282, 819, 102, 42]], [[2391, 819, 136, 42]], [[2530, 819, 138, 42]], [[2671, 819, 138, 42]], [[2812, 819, 138, 42]], [[2953, 819, 136, 42]], [[3096, 819, 66, 42]], [[3165, 819, 206, 42]]], [[[11, 864, 136, 42]], [], [[150, 864, 491, 42]], [], [], [], [], [], [[644, 864, 136, 42]], [], [[786, 864, 137, 42]], [], [[926, 864, 490, 42]], [], [], [[1419, 864, 136, 42]], [[1562, 864, 123, 42]], [[1688, 864, 208, 42]], [[1899, 864, 98, 42]], [[2000, 864, 138, 42]], [[2141, 864, 138, 42]], [[2282, 864, 102, 42]], [[2391, 864, 136, 42]], [[2530, 864, 138, 42]], [[2671, 864, 138, 42]], [[2812, 864, 138, 42]], [[2953, 864, 136, 42]], [[3096, 864, 66, 42]], [[3165, 864, 206, 42]]], [[[11, 909, 136, 42]], [], [[150, 909, 491, 42]], [], [], [], [], [], [[644, 909, 136, 42]], [], [[786, 909, 137, 42]], [], [[926, 909, 490, 42]], [], [], [[1419, 909, 136, 42]], [[1562, 909, 123, 42]], [[1688, 909, 208, 42]], [[1899, 909, 98, 42]], [[2000, 909, 138, 42]], [[2141, 909, 138, 42]], [[2282, 909, 102, 42]], [[2391, 909, 136, 40]], [[2530, 909, 138, 40]], [[2671, 909, 138, 40]], [[2812, 909, 138, 40]], [[2953, 909, 136, 40]], [[3096, 909, 66, 42]], [[3165, 909, 206, 42]]], [[[11, 954, 136, 42]], [], [[150, 954, 491, 42]], [], [], [], [], [], [[644, 954, 136, 42]], [], [[786, 954, 137, 42]], [], [[926, 954, 490, 42]], [], [], [[1419, 954, 136, 42]], [[1562, 954, 123, 42]], [[1688, 954, 208, 42]], [[1899, 954, 98, 42]], [[2000, 954, 138, 42]], [[2141, 954, 138, 42]], [[2282, 954, 102, 42]], [], [[2391, 956, 557, 38]], [], [], [[2955, 956, 66, 40]], [[3024, 954, 347, 42]], []], [[[11, 999, 136, 42]], [], [[150, 999, 491, 42]], [], [], [], [], [], [[644, 999, 136, 42]], [], [[786, 999, 137, 42]], [], [[926, 999, 490, 42]], [], [], [[1419, 999, 136, 42]], [[1562, 999, 123, 42]], [[1688, 999, 208, 42]], [[1899, 999, 98, 42]], [[2000, 999, 138, 42]], [[2141, 999, 138, 42]], [[2282, 999, 102, 42]], [[2391, 1001, 136, 38]], [[2530, 1001, 138, 38]], [[2671, 1001, 138, 38]], [[2812, 1001, 136, 38]], [[2955, 999, 66, 42]], [[3024, 999, 347, 42]], []], [[[11, 1044, 136, 42]], [], [[150, 1044, 491, 42]], [], [], [], [], [], [[644, 1044, 136, 42]], [], [[786, 1044, 137, 42]], [], [[926, 1044, 490, 42]], [], [], [[1419, 1044, 136, 42]], [[1562, 1044, 123, 42]], [[1688, 1044, 208, 42]], [[1899, 1044, 98, 42]], [[2000, 1044, 138, 42]], [[2141, 1044, 138, 42]], [[2282, 1044, 102, 42]], [[2391, 1046, 136, 40]], [[2530, 1046, 138, 40]], [[2671, 1046, 138, 40]], [[2812, 1046, 136, 40]], [[2955, 1044, 66, 42]], [[3024, 1044, 347, 42]], []], [[[11, 1089, 136, 42]], [], [[150, 1089, 491, 42]], [], [], [], [], [], [[644, 1089, 136, 42]], [], [[786, 1089, 137, 42]], [], [[926, 1089, 490, 42]], [], [], [[1419, 1089, 136, 42]], [[1562, 1089, 123, 42]], [[1688, 1089, 208, 42]], [[1899, 1089, 98, 42]], [[2000, 1089, 138, 42]], [[2141, 1089, 138, 42]], [[2282, 1089, 102, 42]], [[2391, 1089, 136, 42]], [[2530, 1089, 138, 42]], [[2671, 1089, 138, 42]], [[2812, 1089, 136, 42]], [[2955, 1089, 66, 42]], [[3024, 1089, 347, 42]], []], [[[11, 1134, 136, 42]], [], [[150, 1134, 491, 42]], [], [], [], [], [], [[644, 1134, 136, 42]], [], [[786, 1134, 137, 42]], [], [[926, 1134, 490, 42]], [], [], [[1419, 1134, 136, 42]], [[1562, 1134, 123, 42]], [[1688, 1134, 208, 42]], [[1899, 1134, 98, 42]], [[2000, 1134, 138, 42]], [[2141, 1134, 138, 42]], [[2282, 1134, 102, 42]], [[2391, 1134, 136, 42]], [[2530, 1134, 138, 42]], [[2671, 1134, 138, 42]], [[2812, 1134, 136, 42]], [[2955, 1134, 66, 42]], [[3024, 1134, 347, 42]], []], [[[11, 1179, 136, 42]], [], [[150, 1179, 491, 42]], [], [], [], [], [], [[644, 1179, 136, 42]], [], [[786, 1179, 137, 42]], [], [[926, 1179, 490, 42]], [], [], [[1419, 1179, 136, 42]], [[1562, 1179, 123, 42]], [[1688, 1179, 208, 42]], [[1899, 1179, 98, 42]], [[2000, 1179, 138, 42]], [[2141, 1179, 138, 42]], [[2282, 1179, 102, 42]], [[2391, 1179, 136, 42]], [[2530, 1179, 138, 42]], [[2671, 1179, 138, 42]], [[2812, 1179, 136, 42]], [[2955, 1179, 66, 42]], [[3024, 1179, 347, 42]], []], [[[11, 1224, 136, 42]], [], [[150, 1224, 491, 42]], [], [], [], [], [], [[644, 1224, 136, 42]], [], [[786, 1224, 137, 42]], [], [[926, 1224, 490, 42]], [], [], [[1419, 1224, 136, 42]], [[1562, 1224, 123, 42]], [[1688, 1224, 208, 42]], [[1899, 1224, 98, 42]], [[2000, 1224, 138, 42]], [[2141, 1224, 138, 42]], [[2282, 1224, 102, 42]], [[2391, 1224, 136, 42]], [[2530, 1224, 138, 42]], [[2671, 1224, 138, 42]], [[2812, 1224, 136, 42]], [[2955, 1224, 66, 42]], [[3024, 1224, 347, 42]], []], [[[11, 1269, 136, 42]], [], [[150, 1269, 491, 42]], [], [], [], [], [], [[644, 1269, 136, 42]], [], [[786, 1269, 137, 42]], [], [[926, 1269, 490, 42]], [], [], [[1419, 1269, 136, 42]], [[1562, 1269, 123, 42]], [[1688, 1269, 208, 42]], [[1899, 1269, 98, 42]], [[2000, 1269, 138, 42]], [[2141, 1269, 138, 42]], [[2282, 1269, 102, 42]], [[2391, 1269, 136, 42]], [[2530, 1269, 138, 42]], [[2671, 1269, 138, 42]], [[2812, 1269, 136, 42]], [[2955, 1269, 66, 42]], [[3024, 1269, 347, 42]], []], [[[11, 1314, 136, 42]], [], [[150, 1314, 491, 42]], [], [], [], [], [], [[644, 1314, 136, 42]], [], [[786, 1314, 137, 42]], [], [[926, 1314, 490, 42]], [], [], [[1419, 1314, 136, 42]], [[1562, 1314, 123, 42]], [[1688, 1314, 208, 42]], [[1899, 1314, 98, 42]], [[2000, 1314, 138, 42]], [[2141, 1314, 138, 42]], [[2282, 1314, 102, 42]], [[2391, 1314, 136, 42]], [[2530, 1314, 138, 42]], [[2671, 1314, 138, 42]], [[2812, 1314, 136, 42]], [[2955, 1314, 66, 42]], [[3024, 1314, 347, 42]], []], [[[11, 1359, 136, 42]], [], [[150, 1359, 491, 42]], [], [], [], [], [], [[644, 1359, 136, 42]], [], [[786, 1359, 137, 42]], [], [[926, 1359, 490, 42]], [], [], [[1419, 1359, 136, 42]], [[1562, 1359, 123, 40]], [[1688, 1359, 208, 40]], [[1899, 1359, 98, 40]], [[2000, 1359, 138, 40]], [[2141, 1359, 138, 40]], [[2282, 1359, 102, 40]], [[2391, 1359, 136, 42]], [[2530, 1359, 138, 42]], [[2671, 1359, 138, 42]], [[2812, 1359, 136, 42]], [[2955, 1359, 66, 42]], [[3024, 1359, 347, 42]], []], [[[11, 1404, 136, 42]], [], [[150, 1404, 491, 42]], [], [], [], [], [], [[644, 1404, 136, 42]], [], [[786, 1404, 137, 42]], [], [[926, 1404, 490, 42]], [], [], [[1419, 1404, 136, 42]], [], [[1562, 1406, 822, 38]], [], [], [], [], [[2391, 1404, 136, 42]], [[2530, 1404, 138, 42]], [[2671, 1404, 138, 42]], [[2812, 1404, 136, 42]], [[2955, 1404, 66, 42]], [[3024, 1404, 347, 42]], []], [[[11, 1449, 136, 42]], [], [[150, 1449, 491, 42]], [], [], [], [], [], [[644, 1449, 136, 42]], [], [[786, 1449, 137, 42]], [], [[926, 1449, 490, 42]], [], [], [[1419, 1449, 136, 42]], [[1562, 1451, 123, 38]], [[1688, 1451, 208, 38]], [[1899, 1451, 98, 38]], [[2000, 1451, 138, 38]], [[2141, 1451, 138, 38]], [[2282, 1451, 102, 38]], [[2391, 1449, 136, 42]], [[2530, 1449, 138, 42]], [[2671, 1449, 138, 42]], [[2812, 1449, 136, 42]], [[2955, 1449, 66, 42]], [[3024, 1449, 347, 42]], []], [[[11, 1494, 136, 42]], [], [[150, 1494, 491, 42]], [], [], [], [], [], [[644, 1494, 136, 42]], [], [[786, 1494, 137, 42]], [], [[926, 1494, 490, 42]], [], [], [[1419, 1494, 136, 42]], [[1562, 1496, 123, 40]], [[1688, 1496, 208, 40]], [[1899, 1496, 98, 40]], [[2000, 1496, 138, 40]], [[2141, 1496, 138, 40]], [[2282, 1496, 102, 40]], [[2391, 1494, 136, 42]], [[2530, 1494, 138, 42]], [[2671, 1494, 138, 42]], [[2812, 1494, 136, 42]], [[2955, 1494, 66, 42]], [[3024, 1494, 347, 42]], []], [[[11, 1539, 136, 42]], [], [[150, 1539, 491, 42]], [], [], [], [], [], [[644, 1539, 136, 42]], [], [[786, 1539, 137, 42]], [], [[926, 1539, 490, 42]], [], [], [[1419, 1539, 136, 42]], [[1562, 1539, 123, 42]], [[1688, 1539, 208, 42]], [[1899, 1539, 98, 42]], [[2000, 1539, 138, 42]], [[2141, 1539, 138, 42]], [[2282, 1539, 102, 42]], [[2391, 1539, 136, 42]], [[2530, 1539, 138, 42]], [[2671, 1539, 138, 42]], [[2812, 1539, 136, 42]], [[2955, 1539, 66, 42]], [[3024, 1539, 347, 42]], []], [[[11, 1584, 136, 42]], [], [[150, 1584, 491, 42]], [], [], [], [], [], [[644, 1584, 136, 42]], [], [[786, 1584, 137, 42]], [], [[926, 1584, 490, 42]], [], [], [[1419, 1584, 136, 42]], [[1562, 1584, 123, 42]], [[1688, 1584, 208, 42]], [[1899, 1584, 98, 42]], [[2000, 1584, 138, 42]], [[2141, 1584, 138, 42]], [[2282, 1584, 102, 42]], [[2391, 1584, 136, 42]], [[2530, 1584, 138, 42]], [[2671, 1584, 138, 42]], [[2812, 1584, 136, 42]], [[2955, 1584, 66, 42]], [[3024, 1584, 347, 42]], []], [[[11, 1629, 136, 42]], [], [[150, 1629, 491, 42]], [], [], [], [], [], [[644, 1629, 136, 42]], [], [[786, 1629, 137, 42]], [], [[926, 1629, 490, 42]], [], [], [[1419, 1629, 136, 42]], [[1562, 1629, 123, 42]], [[1688, 1629, 208, 42]], [[1899, 1629, 98, 42]], [[2000, 1629, 138, 42]], [[2141, 1629, 138, 42]], [[2282, 1629, 102, 42]], [[2391, 1629, 136, 42]], [[2530, 1629, 138, 42]], [[2671, 1629, 138, 42]], [[2812, 1629, 136, 42]], [[2955, 1629, 66, 42]], [[3024, 1629, 347, 42]], []], [[[11, 1674, 136, 42]], [], [[150, 1674, 491, 42]], [], [], [], [], [], [[644, 1674, 136, 42]], [], [[786, 1674, 137, 42]], [], [[926, 1674, 490, 42]], [], [], [[1419, 1674, 136, 42]], [[1562, 1674, 123, 42]], [[1688, 1674, 208, 42]], [[1899, 1674, 98, 42]], [[2000, 1674, 138, 42]], [[2141, 1674, 138, 42]], [[2282, 1674, 102, 42]], [[2391, 1674, 136, 42]], [[2530, 1674, 138, 42]], [[2671, 1674, 138, 42]], [[2812, 1674, 136, 42]], [[2955, 1674, 66, 42]], [[3024, 1674, 347, 42]], []], [[[11, 1719, 136, 42]], [], [[150, 1719, 491, 42]], [], [], [], [], [], [[644, 1719, 136, 42]], [], [[786, 1719, 137, 42]], [], [[926, 1719, 490, 42]], [], [], [[1419, 1719, 136, 42]], [[1562, 1719, 123, 42]], [[1688, 1719, 208, 42]], [[1899, 1719, 98, 42]], [[2000, 1719, 138, 42]], [[2141, 1719, 138, 42]], [[2282, 1719, 102, 42]], [[2391, 1719, 136, 42]], [[2530, 1719, 138, 42]], [[2671, 1719, 138, 42]], [[2812, 1719, 136, 42]], [[2955, 1719, 66, 42]], [[3024, 1719, 347, 42]], []], [[[11, 1764, 136, 42]], [], [[150, 1764, 491, 42]], [], [], [], [], [], [[644, 1764, 136, 42]], [], [[786, 1764, 137, 42]], [], [[926, 1764, 490, 42]], [], [], [[1419, 1764, 136, 42]], [[1562, 1764, 123, 42]], [[1688, 1764, 208, 42]], [[1899, 1764, 98, 42]], [[2000, 1764, 138, 42]], [[2141, 1764, 138, 42]], [[2282, 1764, 102, 42]], [[2391, 1764, 136, 42]], [[2530, 1764, 138, 42]], [[2671, 1764, 138, 42]], [[2812, 1764, 136, 42]], [[2955, 1764, 66, 42]], [[3024, 1764, 347, 42]], []], [[[11, 1809, 136, 42]], [], [[150, 1809, 491, 42]], [], [], [], [], [], [[644, 1809, 136, 42]], [], [[786, 1809, 137, 42]], [], [[926, 1809, 490, 42]], [], [], [[1419, 1809, 136, 42]], [[1562, 1809, 123, 42]], [[1688, 1809, 208, 42]], [[1899, 1809, 98, 42]], [[2000, 1809, 138, 42]], [[2141, 1809, 138, 42]], [[2282, 1809, 102, 42]], [[2391, 1809, 136, 42]], [[2530, 1809, 138, 42]], [[2671, 1809, 138, 42]], [[2812, 1809, 136, 42]], [[2955, 1809, 66, 42]], [[3024, 1809, 347, 42]], []], [[[11, 1854, 136, 42]], [], [[150, 1854, 491, 42]], [], [], [], [], [], [[644, 1854, 136, 42]], [], [[786, 1854, 137, 42]], [], [[926, 1854, 490, 42]], [], [], [[1419, 1854, 136, 42]], [[1562, 1854, 123, 42]], [[1688, 1854, 208, 42]], [[1899, 1854, 98, 42]], [[2000, 1854, 138, 42]], [[2141, 1854, 138, 42]], [[2282, 1854, 102, 42]], [[2391, 1854, 136, 42]], [[2530, 1854, 138, 42]], [[2671, 1854, 138, 42]], [[2812, 1854, 136, 42]], [[2955, 1854, 66, 42]], [[3024, 1854, 347, 42]], []], [[[11, 1899, 136, 42]], [], [[150, 1899, 491, 42]], [], [], [], [], [], [[644, 1899, 136, 42]], [], [[786, 1899, 137, 42]], [], [[926, 1899, 490, 42]], [], [], [[1419, 1899, 136, 42]], [[1562, 1899, 123, 42]], [[1688, 1899, 208, 42]], [[1899, 1899, 98, 42]], [[2000, 1899, 138, 42]], [[2141, 1899, 138, 42]], [[2282, 1899, 102, 42]], [[2391, 1899, 136, 42]], [[2530, 1899, 138, 42]], [[2671, 1899, 138, 42]], [[2812, 1899, 136, 42]], [[2955, 1899, 66, 42]], [[3024, 1899, 347, 42]], []], [[[11, 1944, 136, 42]], [], [[150, 1944, 491, 42]], [], [], [], [], [], [[644, 1944, 136, 42]], [], [[786, 1944, 137, 42]], [], [[926, 1944, 490, 42]], [], [], [[1419, 1944, 136, 42]], [[1562, 1944, 123, 42]], [[1688, 1944, 208, 42]], [[1899, 1944, 98, 42]], [[2000, 1944, 138, 42]], [[2141, 1944, 138, 42]], [[2282, 1944, 102, 42]], [[2391, 1944, 136, 42]], [[2530, 1944, 138, 42]], [[2671, 1944, 138, 42]], [[2812, 1944, 136, 42]], [[2955, 1944, 66, 42]], [[3024, 1944, 347, 42]], []], [[[11, 1989, 136, 42]], [], [[150, 1989, 491, 42]], [], [], [], [], [], [[644, 1989, 136, 42]], [], [[786, 1989, 137, 42]], [], [[926, 1989, 490, 42]], [], [], [[1419, 1989, 136, 42]], [[1562, 1989, 123, 42]], [[1688, 1989, 208, 42]], [[1899, 1989, 98, 42]], [[2000, 1989, 138, 42]], [[2141, 1989, 138, 42]], [[2282, 1989, 102, 42]], [[2391, 1989, 136, 42]], [[2530, 1989, 138, 42]], [[2671, 1989, 138, 42]], [[2812, 1989, 136, 42]], [[2955, 1989, 66, 42]], [[3024, 1989, 347, 42]], []], [[[11, 2034, 136, 42]], [], [[150, 2034, 491, 42]], [], [], [], [], [], [[644, 2034, 136, 42]], [], [[786, 2034, 137, 42]], [], [[926, 2034, 490, 42]], [], [], [[1419, 2034, 136, 42]], [[1562, 2034, 123, 42]], [[1688, 2034, 208, 42]], [[1899, 2034, 98, 42]], [[2000, 2034, 138, 42]], [[2141, 2034, 138, 42]], [[2282, 2034, 102, 42]], [[2391, 2034, 136, 42]], [[2530, 2034, 138, 42]], [[2671, 2034, 138, 42]], [[2812, 2034, 136, 42]], [[2955, 2034, 66, 42]], [[3024, 2034, 347, 42]], []], [[[11, 2079, 136, 42]], [], [[150, 2079, 491, 42]], [], [], [], [], [], [[644, 2079, 136, 42]], [], [[786, 2079, 137, 42]], [], [[926, 2079, 490, 42]], [], [], [[1419, 2079, 136, 42]], [[1562, 2079, 123, 42]], [[1688, 2079, 208, 42]], [[1899, 2079, 98, 42]], [[2000, 2079, 138, 42]], [[2141, 2079, 138, 42]], [[2282, 2079, 102, 42]], [[2391, 2079, 136, 42]], [[2530, 2079, 138, 42]], [[2671, 2079, 138, 42]], [[2812, 2079, 136, 42]], [[2955, 2079, 66, 42]], [[3024, 2079, 347, 42]], []], [[[11, 2124, 136, 42]], [], [[150, 2124, 491, 42]], [], [], [], [], [], [[644, 2124, 136, 42]], [], [[786, 2124, 137, 42]], [], [[926, 2124, 490, 42]], [], [], [[1419, 2124, 136, 42]], [[1562, 2124, 123, 42]], [[1688, 2124, 208, 42]], [[1899, 2124, 98, 42]], [[2000, 2124, 138, 42]], [[2141, 2124, 138, 42]], [[2282, 2124, 102, 42]], [[2391, 2124, 136, 42]], [[2530, 2124, 138, 42]], [[2671, 2124, 138, 42]], [[2812, 2124, 136, 42]], [[2955, 2124, 66, 42]], [[3024, 2124, 347, 42]], []], [[[11, 2169, 136, 42]], [], [[150, 2169, 491, 42]], [], [], [], [], [], [[644, 2169, 136, 42]], [], [[786, 2169, 137, 42]], [], [[926, 2169, 490, 42]], [], [], [[1419, 2169, 136, 42]], [[1562, 2169, 123, 42]], [[1688, 2169, 208, 42]], [[1899, 2169, 98, 42]], [[2000, 2169, 138, 42]], [[2141, 2169, 138, 42]], [[2282, 2169, 102, 42]], [[2391, 2169, 136, 42]], [[2530, 2169, 138, 42]], [[2671, 2169, 138, 42]], [[2812, 2169, 136, 42]], [[2955, 2169, 66, 42]], [[3024, 2169, 347, 42]], []], [[[11, 2214, 136, 42]], [], [[150, 2214, 491, 42]], [], [], [], [], [], [[644, 2214, 136, 42]], [], [[786, 2214, 137, 42]], [], [[926, 2214, 490, 42]], [], [], [[1419, 2214, 136, 42]], [[1562, 2214, 123, 42]], [[1688, 2214, 208, 42]], [[1899, 2214, 98, 42]], [[2000, 2214, 138, 42]], [[2141, 2214, 138, 42]], [[2282, 2214, 102, 42]], [[2391, 2214, 136, 42]], [[2530, 2214, 138, 42]], [[2671, 2214, 138, 42]], [[2812, 2214, 136, 42]], [[2955, 2214, 66, 42]], [[3024, 2214, 347, 42]], []], [[[11, 2259, 136, 43]], [], [[150, 2259, 491, 43]], [], [], [], [], [], [[644, 2259, 136, 43]], [], [[786, 2259, 137, 43]], [], [[926, 2259, 490, 43]], [], [], [[1419, 2259, 136, 43]], [[1562, 2259, 123, 43]], [[1688, 2259, 208, 43]], [[1899, 2259, 98, 43]], [[2000, 2259, 138, 43]], [[2141, 2259, 138, 43]], [[2282, 2259, 102, 43]], [[2391, 2259, 136, 43]], [[2530, 2259, 138, 43]], [[2671, 2259, 138, 43]], [[2812, 2259, 136, 43]], [[2955, 2259, 66, 43]], [[3024, 2259, 347, 43]], []]]
for i in range(len(finalboxes)):
    finalboxes[i] = [x for x in finalboxes[i] if x != []]

#plotting = plt.imshow(finalimg,cmap='gray')
#plt.show()

def read_data(name, start_row, end_row, columns, column_starts, read_until, read_all, whitelist):
    outer=[]
    end = False
    for i in range(start_row, end_row):
        if((end and not read_all) or read_until == 0):
            i -= 1
            break
        read_until -= 1
        for j in range(column_starts[i - start_row], column_starts[i - start_row] + columns):
            inner=''
            if(not len(finalboxes[i][j])==0):
                for k in range(len(finalboxes[i][j])):
                    y,x,w,h = finalboxes[i][j][k][0],finalboxes[i][j][k][1], finalboxes[i][j][k][2],finalboxes[i][j][k][3]
                    finalimg = bitnot[x:x+h, y:y+w]
                    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 1))
                    border = cv2.copyMakeBorder(finalimg,2,2,2,2, cv2.BORDER_CONSTANT,value=[255,255])
                    resizing = cv2.resize(border, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
                    dilation = cv2.dilate(resizing, kernel,iterations=1)
                    erosion = cv2.erode(dilation, kernel,iterations=2)
                    
                    out = pytesseract.image_to_string(erosion, config='-c tessedit_char_whitelist=' + whitelist)
                    if(len(out)==0):
                        out = pytesseract.image_to_string(erosion, config='-c tessedit_char_whitelist=' + whitelist + ' --psm 10')
                    inner = inner +" "+ out
                outer.append(''.join(inner.split()))
            if(inner.isspace()):
                end = True
    outer = ["empty" if x == '' else x for x in outer]
    arr = np.array(outer)
    arr = arr.reshape(i - (start_row - 1), columns)
    #print(name)
    print(arr)
    print('END')

print('END')
read_data('MATCH INFO', 10, 15, 1, (4, 4, 4, 4, 4), 5, True, '0123456789TF')
home_players = int(sys.argv[2])#14
away_players = int(sys.argv[3])#15
read_data('HOME ROSTER', 17, 51, 1, (2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2), home_players, True, 'TF')
read_data('AWAY ROSTER', 17, 51, 1, (5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5), away_players, True, 'TF')
read_data('GOALS', 2, 31, 6, (7, 16, 16, 16, 8, 10, 10, 10, 10, 10, 10, 10, 10, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6), 9999, False, '0123456789:HAOTFXNGDPS')
read_data('PENALTIES', 33, 51, 6, (6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6), 9999, False, '0123456789:HAOTMP')
read_data('PENALTY SHOTS', 2, 15, 5, (2, 11, 11, 11, 3, 5, 5, 5, 5, 5, 5, 5, 5), 9999, False, '0123456789:HAOTF')
read_data('GOALTENDER SHIFTS', 2, 21, 5, (13, 22, 22, 22, 14, 16, 16, 16, 16, 16, 16, 16, 16, 8, 12, 12, 12, 12, 12), 9999, False, '0123456789:HAOT')
read_data('TIME-OUTS', 8, 15, 3, (0, 0, 0), 9999, False, '0123456789:HAOT')
read_data('SHOOTOUT SHOTS', 23, 51, 4, (12, 12, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), 9999, False, '0123456789:HATF')